Sebastian Borgeaud
spb61
Exercise 4

type color = int * int * int;
type xy = int * int;
type image = (color Array.array) Array.array;

fun image w h (c :color) :image = Array.tabulate(w, fn j => Array.tabulate(h, fn i => c));

fun size (im :image) = (Array.length(im), Array.length(Array.sub(im,0)));

fun drawPixel (im :image) x y c = Array.update(Array.sub(im,y), x, c ); 

fun toPPM  (image :image) filename =
	let val oc = TextIO.openOut filename
		val (w,h) = size image
		fun format4 i = StringCvt.padLeft #" " 4 (Int.toString i)
	in
		TextIO.output(oc, "P3\n" ^ Int.toString w ^ " " ^ Int.toString h ^ "\n255\n");
		Array.app (fn row => Array.app(fn (a,b,c) => TextIO.output(oc, format4 a ^ format4 b ^ format4 c )) row)  image;
		TextIO.closeOut oc
	end;	


fun drawHLine (im :image) x y length c =
	let 
		val i = ref 0
	in
		while (!i < length) do
			((drawPixel im (x + (!i)) y c); (i := (!i) + 1))
	end;

type color
type xy
type image
val image = fn : int -> int -> color -> image
val size = fn : image -> int * int
val drawPixel = fn : image -> int -> int -> color -> unit
val toPPM = fn : image -> string -> unit
val drawHLine = fn : image -> int -> int -> int -> color -> unit
val it = () : unit



> val im = image 3 4 (0,0,0);                                      
val im =
   fromList[fromList[(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
      fromList[(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
      fromList[(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)]]
: color Array.array Array.array
> size im;
val it = (3, 4) : int * int
> drawPixel im 2 2 (255,255,255);
val it = () : unit
> im;
val it =
   fromList[fromList[(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
      fromList[(0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0)],
      fromList[(0, 0, 0), (0, 0, 0), (255, 255, 255), (0, 0, 0)]]
: color Array.array Array.array



> val im2 = image 500 500 (255,255,255);
 ...
       (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, ...), ..., ...],
      fromList[(255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, ...), ..., ...],
      fromList[(255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, ...), ..., ...],
      fromList[(255, 255, 255), (255, 255, 255), (255, 255, 255),
         (255, 255, 255), (255, 255, 255), (25
...

> drawHLine im2 4 4 200 (255,0,0);
val it = () : unit
> drawHLine im2 100 100 40 (0,255,0);
val it = () : unit
> drawHLine im2 300 300 150 (0,0,255);
val it = () : unit
> toPPM im2 "mybeautifulpicture";
val it = () : unit
